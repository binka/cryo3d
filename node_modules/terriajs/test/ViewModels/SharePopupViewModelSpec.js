'use strict';

var SharePopupViewModel = require('../../lib/ViewModels/SharePopupViewModel');
var Terria = require('../../lib/Models/Terria');
var queryToObject = require('terriajs-cesium/Source/Core/queryToObject');
var URI = require('urijs');

describe('SharePopupViewModel', function() {
    var terria;
    var sharePopup;

    beforeEach(function() {
        terria = new Terria({
            baseUrl: './'
        });
        terria.baseMap = {};
    });

    function init() {
        sharePopup = new SharePopupViewModel({
            terria: terria,
            userPropWhiteList: SharePopupViewModel.defaultUserPropWhiteList.concat(['couldBeAnyString'])
        });
    }

    describe('share url', function() {
        testUserProperties(function() {
            return sharePopup.url;
        });
    });

    describe('embed url', function() {
        testUserProperties(function() {
            // Get the src of the embed code
            return /src="(.*)"/.exec(sharePopup.embedCode)[1];
        });
    });

    /**
     * Runs tests to ensure that user properties are embedded into the url
     * generated by the SharePopupViewModal
     *
     * @param urlGetter a function that returns the url to test, after the sharePopup has been
     *      initialised.
     */
    function testUserProperties(urlGetter) {
        var ACTIVE_TAB_ID = 'Search';
        var ANY_STRING_VALUE = 'Any string value';

        it('includes whitelisted user properties', function() {
            terria.userProperties.activeTabId = ACTIVE_TAB_ID;
            terria.userProperties.couldBeAnyString = ANY_STRING_VALUE;

            init();

            var url = urlGetter();
            var parsed = parseUrl(url);

            expect(parsed.activeTabId).toBe(ACTIVE_TAB_ID);
            expect(parsed.couldBeAnyString).toBe(ANY_STRING_VALUE);
        });

        it('excludes non-whitelisted user properties', function() {
            terria.userProperties.notWhiteListed = ANY_STRING_VALUE;

            init();

            var url = urlGetter();
            var parsed = parseUrl(url);

            expect(parsed.notWhiteListed).toBeUndefined();
        });
    }

    /**
     * Parses the data that the share popup encodes in the URL.
     */
    function parseUrl(url) {
        var uri = new URI(url);
        var hash = uri.fragment();
        return queryToObject(hash);
    }
});
